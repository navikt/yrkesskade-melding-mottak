spring:
  autoconfigure.exclude: org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration
  main.banner-mode: "off"
  kafka:
    bootstrap-servers: ${KAFKA_BROKERS}
    client-id: yrkesskade-melding-mottak
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      group-id: yrkesskade-melding-mottak
      auto-offset-reset: earliest
  datasource:
    url: jdbc:postgresql://${YRKESSKADE_MOTTAK_DB_HOST}:${YRKESSKADE_MOTTAK_DB_PORT}/${YRKESSKADE_MOTTAK_DB_DATABASE}
    username: ${YRKESSKADE_MOTTAK_DB_USERNAME}
    password: ${YRKESSKADE_MOTTAK_DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      connection-test-query: "select 1"
      max-lifetime: 30000
      minimum-idle: 1
      data-source-properties.stringtype: unspecified # Nødvendig for å kunde sende en String til et json-felt i PostgresSql
  flyway:
    enabled: true
  jpa:
    properties:
      hibernate:
        enable_lazy_load_no_trans: true
        ddl-auto: none
management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: info, health, metrics, prometheus
      base-path: /internal
  metrics.export.prometheus.enabled: true
saf.graphql.url: https://saf.dev-fss-pub.nais.io/graphql

SAF_APP_CLIENT_ID: dev-fss.teamdokumenthandtering.saf
TENANT_ID: 966ac572-f5b7-4bbe-aa88-c76419c0f851         # trygdeetaten.no

no.nav.security.jwt:
  issuer:
    aad:
      discoveryurl: ${AZURE_APP_WELL_KNOWN_URL}
      accepted_audience: ${AZURE_APP_CLIENT_ID}
  client:
    registration:
      saf-maskintilmaskin:
        token-endpoint-url: https://login.microsoftonline.com/${TENANT_ID}/oauth2/v2.0/token
        grant-type: client_credentials
        scope: api://${SAF_APP_CLIENT_ID}/.default
        authentication:
          client-id: ${AZURE_APP_CLIENT_ID}
          client-jwk: ${AZURE_APP_JWK}
          client-auth-method: private_key_jwt
---
spring:
  config:
    activate:
      on-profile: db
  datasource:
    url: jdbc:postgresql://localhost:5432/test
    username: test
    password: test
KAFKA_BROKERS: http://localhost:9092

---
spring:
  config:
    activate:
      on-profile: integration
  datasource:
    url: jdbc:postgresql://localhost:5432/test
    username: test
    password: test
  main:
    allow-bean-definition-overriding: true
  kafka:
    properties:
      schema.registry.url: denne-maa-bare-ha-en-verdi
kafka:
  topic:
    aapen-dok-journalfoering: test

KAFKA_BROKERS: ${spring.embedded.kafka.brokers}
---
spring:
  config:
    activate:
      on-profile: dev
  kafka:
    properties:
      schema.registry.url: ${KAFKA_SCHEMA_REGISTRY}
      security.protocol: SSL
      basic:
        auth:
          credentials.source: USER_INFO
          user.info: ${KAFKA_SCHEMA_REGISTRY_USER}:${KAFKA_SCHEMA_REGISTRY_PASSWORD}
      ssl:
        truststore:
          type: JKS
          location: ${KAFKA_TRUSTSTORE_PATH}
          password: ${KAFKA_CREDSTORE_PASSWORD}
        keystore:
          type: PKCS12
          location: ${KAFKA_KEYSTORE_PATH}
          password: ${KAFKA_CREDSTORE_PASSWORD}
        key.password: ${KAFKA_CREDSTORE_PASSWORD}

kafka:
  topic:
    aapen-dok-journalfoering: teamdokumenthandtering.aapen-dok-journalfoering-q1